{"version":3,"sources":["assets/resume.pdf","App/Splash/Splash.tsx","App/ContactMe/ContactMe.tsx","App/Footer/Footer.tsx","App/App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","ScrollLink","Scroll","Link","Splash","className","role","aria-label","href","ResumePath","target","rel","to","spy","smooth","duration","offset","ContactMe","name","method","action","type","placeholder","value","Footer","App","state","hasScrolled","checkScroll","window","scrollY","setState","document","addEventListener","this","removeEventListener","id","Component","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wFAAAA,EAAOC,QAAU,IAA0B,oC,4UCOrCC,G,MAAaC,IAAOC,MA0DXC,EAvDI,WACf,OACI,6BAASC,UAAU,eACf,yBAAKA,UAAU,4BACX,yBAAKA,UAAU,4BACX,yBAAKA,UAAU,qBACf,wBAAIA,UAAU,oBACV,0BAAMC,KAAK,MAAMC,aAAW,QAA5B,4BADJ,sBAGA,wBAAIF,UAAU,YAAd,sHAGA,yBAAKA,UAAU,WACX,uBAAGG,KAAMC,IAAYC,OAAO,SAASC,IAAI,sBAAsBN,UAAU,UAAzE,eAGA,kBAACJ,EAAD,CACIW,GAAG,aACHC,KAAK,EACLC,QAAQ,EACRC,SAAU,IACVC,QAAS,IACTX,UAAU,qBANd,mBAQsB,0BAAMC,KAAK,MAAMC,aAAW,QAA5B,8BAG1B,yBAAKF,UAAU,gBACX,uBAAGG,KAAK,8BAA8BG,IAAI,kBACtC,uBAAGN,UAAU,+BAEjB,uBAAGG,KAAK,uCAAuCG,IAAI,oBAC/C,uBAAGN,UAAU,oCAEjB,uBAAGG,KAAK,iCAAiCG,IAAI,kBACzC,uBAAGN,UAAU,kCAK7B,kBAACJ,EAAD,CACIW,GAAG,aACHC,KAAK,EACLC,QAAQ,EACRC,SAAU,IACVV,UAAU,iBACVW,QAAS,KAET,uBAAGX,UAAU,yBCXdY,G,MA3CO,WAClB,OACI,6BAASZ,UAAU,wBACf,wBAAIA,UAAU,SAAd,cACA,0BACIa,KAAK,QACLb,UAAU,QACVc,OAAO,OACPC,OAAQ,iCAGR,yBAAKf,UAAU,SACX,2BAAOA,UAAU,SAAjB,QACA,yBAAKA,UAAU,WACX,2BAAOA,UAAU,QAAQgB,KAAK,OAAOH,KAAK,OAAOI,YAAY,mBAIrE,yBAAKjB,UAAU,SACX,2BAAOA,UAAU,SAAjB,SACA,yBAAKA,UAAU,WACX,2BAAOA,UAAU,QAAQgB,KAAK,QAAQH,KAAK,WAAWI,YAAY,oBAI1E,yBAAKjB,UAAU,SACX,2BAAOA,UAAU,SAAjB,WACA,yBAAKA,UAAU,WACX,8BAAUa,KAAK,UAAUb,UAAU,WAAWiB,YAAY,wBAIlE,yBAAKjB,UAAU,gCACX,yBAAKA,UAAU,WACX,2BAAOA,UAAU,iBAAiBgB,KAAK,SAASE,MAAM,4BCtB/DC,G,MAZI,WACf,OACI,4BAAQnB,UAAU,UACd,yBAAKA,UAAU,6BACX,wCACc,0BAAMC,KAAK,MAAMC,aAAW,QAA5B,gBADd,uBC4DDkB,E,2MAlDXC,MAAkB,CACdC,aAAa,G,EAWjBC,YAAc,WACNC,OAAOC,QAAU,IAAM,EAAKJ,MAAMC,YAClC,EAAKI,SAAS,CAAEJ,aAAa,IACH,IAAnBE,OAAOC,SAAiB,EAAKJ,MAAMC,aAC1C,EAAKI,SAAS,CAAEJ,aAAa,K,mFAXjCK,SAASC,iBAAiB,SAAUC,KAAKN,e,6CAIzCI,SAASG,oBAAoB,SAAUD,KAAKN,e,+BAYpBM,KAAKR,MAArBC,YAER,OACI,kBAAC,WAAD,KAEI,yBAAKtB,UAAU,QACX,kBAAC,UAAD,CAAS+B,GAAG,SAASlB,KAAK,UACtB,kBAAC,EAAD,OAWJ,kBAAC,UAAD,CAASkB,GAAG,aAAalB,KAAK,cAC1B,kBAAC,EAAD,OAEJ,kBAAC,EAAD,Y,GA3CFmB,aCLEC,QACW,cAA7BT,OAAOU,SAASC,UAEe,UAA7BX,OAAOU,SAASC,UAEhBX,OAAOU,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASX,SAASY,eAAe,SDkI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.e712c474.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/resume.fe5e6b8d.pdf\";","import React, { FC } from 'react';\nimport Scroll from 'react-scroll';\n\nimport ResumePath from '../../assets/resume.pdf';\n\nimport './Splash.scss'\n\nconst ScrollLink = Scroll.Link;\n\n//TODO Animate Arrow and make clickable\nconst Splash: FC = () => {\n    return (\n        <section className=\"hero splash\">\n            <div className=\"hero-body body-container\">\n                <div className=\"container text-container\">\n                    <div className=\"selfie-container\" />\n                    <h1 className=\"title is-massive\">\n                        <span role=\"img\" aria-label=\"wave\">üëãüèΩ</span> Hey, I'm Michael.\n                    </h1>\n                    <h1 className=\"subtitle\">\n                        I'm an engineering student at the University of Waterloo, a Full Stack Developer and Machine Learning enthousiast.\n                    </h1>\n                    <div className=\"buttons\">\n                        <a href={ResumePath} target=\"_blank\" rel=\"noopener noreferrer\" className=\"button\">\n                            View Resume\n                        </a>\n                        <ScrollLink \n                            to=\"contact-me\" \n                            spy={true} \n                            smooth={true} \n                            duration={500}\n                            offset={-200} \n                            className=\"button is-primary\"\n                        >\n                            Get in Touch&nbsp;<span role=\"img\" aria-label=\"wave\">üëãüèΩ</span>\n                        </ScrollLink>\n                    </div>\n                    <div className=\"social-links\">\n                        <a href=\"https://github.com/mikevyt/\" rel=\"Github Profile\">\n                            <i className=\"fab fa-github social-icon\"></i>\n                        </a>\n                        <a href=\"https://www.linkedin.com/in/mikevyt/\" rel=\"LinkedIn Profile\">\n                            <i className=\"fab fa-linkedin-in social-icon\"></i>\n                        </a>\n                        <a href=\"https://www.kaggle.com/mikevyt\" rel=\"Kaggle Profile\">\n                            <i className=\"fab fa-kaggle social-icon\"></i>\n                        </a>\n                    </div>\n                </div>\n            </div>\n            <ScrollLink\n                to=\"contact-me\" \n                spy={true} \n                smooth={true} \n                duration={500}\n                className=\"container icon\"\n                offset={-200}\n            >\n                <i className=\"fas fa-arrow-down\"></i>\n            </ScrollLink>\n\n        </section>\n    );\n}\n\nexport default Splash;","import React, { FC } from 'react';\n\nimport './ContactMe.scss';\n\nconst ContactMe: FC = () => {\n    return (\n        <section className=\"container contact-me\">\n            <h1 className=\"title\">Say Hello!</h1>\n            <form \n                name=\"input\"\n                className=\"field\"\n                method=\"POST\"\n                action={'https://formspree.io/meqjzody'}\n            >\n                \n                <div className=\"field\">\n                    <label className=\"label\">Name</label>\n                    <div className=\"control\">\n                        <input className=\"input\" type=\"text\" name=\"Name\" placeholder=\"Your name...\" />\n                    </div>\n                </div>\n\n                <div className=\"field\">\n                    <label className=\"label\">Email</label>\n                    <div className=\"control\">\n                        <input className=\"input\" type=\"email\" name=\"_replyto\" placeholder=\"Your email...\" />\n                    </div>\n                </div>\n\n                <div className=\"field\">\n                    <label className=\"label\">Message</label>\n                    <div className=\"control\">\n                        <textarea name=\"message\" className=\"textarea\" placeholder=\"Type your message\"></textarea>\n                    </div>\n                </div>\n\n                <div className=\"field is-grouped send-button\">\n                    <div className=\"control\">\n                        <input className=\"button is-link\" type=\"submit\" value=\"Send üì¨\" />\n                    </div>\n                </div>\n\n            </form>\n        </section>\n    );\n};\n\nexport default ContactMe;","import React, { FC } from 'react';\n\nimport './Footer.scss'\n\nconst Footer: FC = () => {\n    return (\n        <footer className=\"footer\">\n            <div className=\"content has-text-centered\">\n                <p>\n                    Made with <span role=\"img\" aria-label=\"wave\">‚ù§Ô∏è</span>, from Michael.\n                </p>\n            </div>\n        </footer>\n    );\n};\n\nexport default Footer;","import React, { Component, Fragment } from 'react';\nimport { Element } from 'react-scroll';\nimport './App.scss';\n\nimport NavBar from './NavBar/NavBar';\nimport ScrollToTop from './ScrollToTop/ScrollToTop';\nimport Splash from './Splash/Splash';\nimport AboutMe from './AboutMe/AboutMe';\nimport Knowledge from './Knowledge/Knowledge';\nimport Experiences from './Experiences/Experiences';\nimport ContactMe from './ContactMe/ContactMe';\nimport Footer from './Footer/Footer';\n\ninterface AppState {\n    hasScrolled: boolean\n}\n\nclass App extends Component<{}, AppState> {\n    state: AppState = {\n        hasScrolled: false\n    };\n\n    componentDidMount () {\n        document.addEventListener('scroll', this.checkScroll);\n    }\n\n    componentWillUnmount () {\n        document.removeEventListener('scroll', this.checkScroll);\n    }\n\n    checkScroll = () => {\n        if (window.scrollY > 0 && !this.state.hasScrolled) {\n            this.setState({ hasScrolled: true });\n        } else if (window.scrollY === 0 && this.state.hasScrolled) {\n            this.setState({ hasScrolled: false });\n        }\n    }\n\n    render () {\n        const { hasScrolled } = this.state;\n\n        return (\n            <Fragment>\n                {/* <NavBar/> */}\n                <div className=\"body\">\n                    <Element id='splash' name='splash'>\n                        <Splash />\n                    </Element>\n                    {/* <Element id='my-story' name='my-story'>\n                        <AboutMe />\n                    </Element>\n                    <Element id='expertise' name='expertise'>\n                        <Knowledge />\n                    </Element>\n                    <Element id='experiences' name='experiences'>\n                        <Experiences />\n                    </Element> */}\n                    <Element id='contact-me' name='contact-me'>\n                        <ContactMe />\n                    </Element>\n                    <Footer />\n                    {/* { hasScrolled && <ScrollToTop /> } */}\n                </div>\n            </Fragment>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './styles.scss';\nimport App from './App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}