{"version":3,"sources":["logo.jpg","App/NavBar/AnimatedLogo/AnimatedLogo.tsx","App/NavBar/NavItems/NavItems.tsx","App/NavBar/NavBar.tsx","App/IntroHero/IntroHero.tsx","App/Knowledge/Knowledge.tsx","App/App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","AnimatedLogo","src","logo","className","alt","Component","NavItems","NavBar","role","aria-label","IntroHero","Knowledge","languages","map","language","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2FAAAA,EAAOC,QAAU,IAA0B,kC,sTCe5BC,E,iLARP,OACI,6BACI,yBAAKC,IAAKC,IAAMC,UAAU,OAAOC,IAAI,c,GAJ1BC,aCeZC,G,MAjBM,WACjB,OACI,yBAAKH,UAAU,wBACX,uBAAGA,UAAU,eAAb,aAGA,uBAAGA,UAAU,eAAb,eAGA,yBAAKA,UAAU,gDAAf,yCCYGI,G,MAjBI,WAEf,OACI,yBAAKJ,UAAU,SAASK,KAAK,aAAaC,aAAW,mBACjD,yBAAKN,UAAU,aACX,yBAAKA,UAAU,gBACX,kBAAC,EAAD,OAGJ,yBAAKA,UAAU,eACX,kBAAC,EAAD,WCYLO,G,MAzBO,WAClB,OACI,6BAASP,UAAU,gBACf,yBAAKA,UAAU,aACX,yBAAKA,UAAU,aACX,wBAAIA,UAAU,oBAAd,4BAGA,wBAAIA,UAAU,oBAAd,qBAGA,yBAAKA,UAAU,WACX,yBAAKA,UAAU,UAAf,eAGA,yBAAKA,UAAU,qBAAf,oBCoBTQ,G,MAnCO,WAClB,IAAMC,EAAY,CAAC,wBAAyB,SAAU,KAAM,MAAO,OAAQ,SAAU,QAAS,KAAM,OACpG,OACI,6BAAST,UAAU,uBACf,wBAAIA,UAAU,SAAd,aACA,yBAAKA,UAAU,oBACX,yBAAKA,UAAU,kBACX,6BAASA,UAAU,qBACf,wBAAIA,UAAU,cAAd,aACA,yBAAKA,UAAU,mBACTS,EAAUC,KAAI,SAAAC,GAAQ,OACpB,0BAAMX,UAAU,OACXW,SAMrB,yBAAKX,UAAU,kBACX,6BAASA,UAAU,qBACf,wBAAIA,UAAU,cAAd,gBACA,yBAAKA,UAAU,mBACTS,EAAUC,KAAI,SAAAC,GAAQ,OACpB,0BAAMX,UAAU,OACXW,aCNtBC,EAfC,WACZ,OACI,yBAAKZ,UAAU,OACX,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCAQa,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.2ff729ea.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.2f67d006.jpg\";","import React, { Component } from 'react';\nimport './AnimatedLogo.css'\n\nimport logo from '../../../logo.jpg';\n\nclass AnimatedLogo extends Component {\n    render () {\n        return (\n            <div>\n                <img src={logo} className=\"logo\" alt=\"logo\" />\n            </div>\n        );\n    }\n}\n\nexport default AnimatedLogo;","import React, { FC } from 'react';\nimport './NavItems.css';\n\nconst NavItems: FC = () => {\n    return (\n        <div className=\"navbar-end nav-items\">\n            <a className=\"navbar-item\">\n                Knowledge\n            </a>\n            <a className=\"navbar-item\">\n                Experiences\n            </a>\n            <div className=\"navbar-item contact-button button is-primary\">\n                Say Hello üëãüèΩ\n            </div>\n            {/* Switch */}\n        </div>\n    )\n};\n\nexport default NavItems;","import React, { FC } from 'react';\n\nimport AnimatedLogo from './AnimatedLogo/AnimatedLogo';\nimport NavItems from './NavItems/NavItems';\n\nimport './NavBar.css';\n\nconst NavBar: FC = () => {\n\n    return (\n        <nav className=\"navbar\" role=\"navigation\" aria-label=\"main navigation\">\n            <div className=\"container\">\n                <div className=\"navbar-brand\">\n                    <AnimatedLogo />\n                </div>\n\n                <div className=\"navbar-menu\">\n                    <NavItems />\n                </div>\n            </div>\n        </nav>\n    );\n};\n\nexport default NavBar;","import React, { FC } from 'react';\n\nimport './IntroHero.css'\n\nconst IntroHero: FC = () => {\n    return (\n        <section className=\"hero is-info\">\n            <div className=\"hero-body\">\n                <div className=\"container\">\n                    <h1 className=\"title is-massive\">\n                        üëãüèΩ\n                    </h1>\n                    <h1 className=\"title is-massive\">\n                        Hey, I'm Michael.\n                    </h1>\n                    <div className=\"buttons\">\n                        <div className=\"button\">\n                            View Resume\n                        </div>\n                        <div className=\"button is-primary\">\n                            Contact Me\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </section>\n    );\n}\n\nexport default IntroHero;","import React, { FC } from 'react';\n\nimport './Knowledge.css';\n\nconst Knowledge: FC = () => {\n    const languages = ['Typescript/Javascript', 'Python', 'Go', 'SQL', 'Bash', 'MATLAB', 'Swift', 'C#', 'C++'];\n    return (\n        <section className=\"container knowledge\">\n            <h1 className=\"title\">Knowledge</h1>\n            <div className=\"tile is-ancestor\">\n                <div className=\"tile is-parent\">\n                    <article className=\"tile is-child box\">\n                        <h3 className=\"title is-6\">Languages</h3>\n                        <div className=\"tags are-medium\">\n                            { languages.map(language => (\n                                <span className=\"tag\">\n                                    {language}\n                                </span>\n                            ))}\n                        </div>\n                    </article>\n                </div>\n                <div className=\"tile is-parent\">\n                    <article className=\"tile is-child box\">\n                        <h3 className=\"title is-6\">Technologies</h3>\n                        <div className=\"tags are-medium\">\n                            { languages.map(language => (\n                                <span className=\"tag\">\n                                    {language}\n                                </span>\n                            ))}\n                        </div>\n                    </article>\n                </div>\n            </div>\n        </section>\n    );\n};\n\nexport default Knowledge;","import React, { FC } from 'react';\nimport './App.css';\n\nimport NavBar from './NavBar/NavBar';\nimport IntroHero from './IntroHero/IntroHero';\nimport Knowledge from './Knowledge/Knowledge';\n\nconst App: FC = () => {\n    return (\n        <div className=\"App\">\n            <NavBar />\n            <IntroHero />\n            <Knowledge />\n            {/* <Experiences />\n            <ContactMe /> \n            <Footer />\n            */}\n\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}